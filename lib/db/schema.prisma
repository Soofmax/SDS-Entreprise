// Schéma Prisma pour SDS
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle pour les contacts/leads
model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Informations de contact
  name      String
  email     String
  phone     String?
  company   String?

  // Détails du projet
  projectType String // vitrine, ecommerce, application, etc.
  budget      String
  timeline    String
  message     String

  // Métadonnées
  source      String? // d'où vient le lead (formulaire, calculateur, etc.)
  userAgent   String?
  ipAddress   String?
  referrer    String?

  // Statut du lead
  status      ContactStatus @default(NEW)
  priority    Priority      @default(MEDIUM)
  assignedTo  String?

  // Relations
  notes       ContactNote[]
  activities  ContactActivity[]

  @@map("contacts")
}

model ContactNote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  content   String
  author    String // nom de la personne qui a ajouté la note
  
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("contact_notes")
}

model ContactActivity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  type      ActivityType
  title     String
  details   String?
  
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("contact_activities")
}

// Modèle pour les calculs d'aide France Num
model FranceNumCalculation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Données du formulaire
  companySize String // tpe, pme, eti, ge
  sector      String // commerce, artisanat, services, etc.
  location    String
  projectType String
  budget      String

  // Résultats du calcul
  aidAmount     Float
  aidPercentage Float
  finalCost     Float
  eligible      Boolean

  // Métadonnées
  userAgent String?
  ipAddress String?
  sessionId String?

  @@map("france_num_calculations")
}

// Modèle pour les projets portfolio
model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Informations de base
  title       String
  description String
  category    ProjectCategory
  status      ProjectStatus   @default(COMPLETED)

  // URLs et liens
  imageUrl    String?
  liveUrl     String?
  githubUrl   String?

  // Métadonnées
  featured    Boolean @default(false)
  order       Int     @default(0)

  // Métriques de performance
  performanceScore   Int?
  seoScore          Int?
  accessibilityScore Int?
  conversionRate    Float?

  // Relations
  technologies ProjectTechnology[]
  testimonials ProjectTestimonial[]

  @@map("projects")
}

model Technology {
  id       String @id @default(cuid())
  name     String @unique
  category String // frontend, backend, database, tool, design
  icon     String?
  color    String?

  // Relations
  projects ProjectTechnology[]

  @@map("technologies")
}

model ProjectTechnology {
  projectId    String
  technologyId String

  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([projectId, technologyId])
  @@map("project_technologies")
}

// Modèle pour les témoignages
model Testimonial {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Contenu du témoignage
  content String
  rating  Int    @default(5)

  // Informations de l'auteur
  authorName     String
  authorPosition String
  authorCompany  String
  authorAvatar   String?

  // Métadonnées
  featured Boolean @default(false)
  approved Boolean @default(false)
  order    Int     @default(0)

  // Relations
  projects ProjectTestimonial[]

  @@map("testimonials")
}

model ProjectTestimonial {
  projectId     String
  testimonialId String

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testimonial Testimonial @relation(fields: [testimonialId], references: [id], onDelete: Cascade)

  @@id([projectId, testimonialId])
  @@map("project_testimonials")
}

// Modèle pour les analytics
model AnalyticsEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Informations de l'événement
  name       String
  category   String // user_interaction, form_submission, page_view, error
  properties Json?

  // Métadonnées de session
  sessionId String?
  userId    String?
  userAgent String?
  ipAddress String?
  referrer  String?
  page      String?

  @@map("analytics_events")
}

// Modèle pour les erreurs et logs
model ErrorLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Informations de l'erreur
  code     String
  message  String
  severity String // low, medium, high, critical
  details  Json?

  // Contexte
  userAgent String?
  ipAddress String?
  userId    String?
  page      String?
  stack     String?

  // Statut
  resolved Boolean @default(false)

  @@map("error_logs")
}

// Modèle pour la configuration
model AppConfig {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt

  key   String @unique
  value Json

  @@map("app_config")
}

// Modèle pour les utilisateurs admin (optionnel)
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique
  name      String
  role      UserRole @default(ADMIN)
  active    Boolean  @default(true)

  // Authentication
  passwordHash String?
  lastLoginAt  DateTime?

  @@map("users")
}

// Enums
enum ContactStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATION
  WON
  LOST
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  EMAIL_SENT
  CALL_MADE
  MEETING_SCHEDULED
  PROPOSAL_SENT
  CONTRACT_SIGNED
  PROJECT_STARTED
  PROJECT_COMPLETED
  NOTE_ADDED
}

enum ProjectCategory {
  VITRINE
  ECOMMERCE
  WEB3
  MOBILE
  APPLICATION
  REFONTE
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

