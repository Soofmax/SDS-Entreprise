# 🚀 CI/CD Pipeline for SDS Enterprise
# Comprehensive pipeline with testing, security, and deployment

name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

# Cancel previous runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HUSKY: 0
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # ============================================================================
  # Code Quality & Security Analysis
  # ============================================================================
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm install --no-audit --no-fund --legacy-peer-deps

      - name: 🔍 ESLint analysis
        run: npm run lint
        continue-on-error: true

      - name: 🎨 Prettier check
        run: npm run format:check
        continue-on-error: true

      - name: 📊 TypeScript check
        run: npm run type-check

      - name: 🔒 Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔐 Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nextjs
        continue-on-error: true

  # ============================================================================
  # Unit & Integration Tests
  # ============================================================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: sds_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm install --no-audit --no-fund --legacy-peer-deps

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sds_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sds_test
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: npm run test:coverage
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📈 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # ============================================================================
  # End-to-End Tests
  # ============================================================================
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm install --no-audit --no-fund --legacy-peer-deps

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🚀 Build application
        run: npm run build

      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        continue-on-error: true

      - name: 📸 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ============================================================================
  # Build & Push Docker Image
  # ============================================================================
  build:
    name: 🐳 Build & Push Image
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runner

      - name: 📝 Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    permissions:
      security-events: write

    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.salwadevstudio.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🔍 Health check
        run: |
          sleep 30
          curl -f https://staging.salwadevstudio.com/api/health || exit 1

      - name: 📊 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://staging.salwadevstudio.com
            https://staging.salwadevstudio.com/services
            https://staging.salwadevstudio.com/portfolio
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, e2e]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://salwadevstudio.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🔍 Production health check
        run: |
          sleep 60
          curl -f https://salwadevstudio.com/api/health || exit 1

      - name: 📊 Production Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://salwadevstudio.com
            https://salwadevstudio.com/services
            https://salwadevstudio.com/portfolio
            https://salwadevstudio.com/contact
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📈 Update status page
        run: |
          curl -X POST "${{ secrets.STATUS_PAGE_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"status": "operational", "message": "Deployment successful"}'

  # ============================================================================
  # Notifications
  # ============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: 💬 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: 📧 Email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '❌ SDS Enterprise - Deployment Failed'
          to: dev@salwadevstudio.com
          from: ci-cd@salwadevstudio.com
          body: |
            Deployment failed for commit ${{ github.sha }}
            
            Workflow: ${{ github.workflow }}
            Branch: ${{ github.ref }}
            Author: ${{ github.actor }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

# ============================================================================
# Workflow Configuration
# ============================================================================
# Required secrets:
# - VERCEL_TOKEN: Vercel deployment token
# - VERCEL_ORG_ID: Vercel organization ID
# - VERCEL_PROJECT_ID: Vercel project ID
# - CODECOV_TOKEN: Codecov upload token
# - SONAR_TOKEN: SonarCloud token
# - SLACK_WEBHOOK: Slack webhook URL
# - STATUS_PAGE_WEBHOOK: Status page webhook
# - EMAIL_USERNAME: SMTP username
# - EMAIL_PASSWORD: SMTP password

